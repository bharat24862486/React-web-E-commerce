{"ast":null,"code":"import { sync } from '../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  let {\n    keyframes,\n    duration = 300,\n    ease\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    const sampleAnimation = animateValue({\n      ...options,\n      repeat: 0,\n      delay: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  const animation = animateStyle(value.owner.current, valueName, keyframes, {\n    ...options,\n    duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  });\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(() => animation.cancel());\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return {\n    then(resolve, reject) {\n      return animation.finished.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n    play: () => animation.play(),\n    pause: () => animation.pause(),\n    stop: () => {\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      const {\n        currentTime\n      } = animation;\n      if (currentTime) {\n        const sampleAnimation = animateValue({\n          ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      sync.update(() => animation.cancel());\n    }\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","_ref","onUpdate","onComplete","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","keyframes","duration","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","onfinish","set","update","cancel","then","resolve","reject","finished","time","currentTime","newTime","play","pause","stop","autoplay","setWithVelocity"],"sources":["E:/Desktop/reactpsc/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return animation.finished.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        play: () => animation.play(),\n        pause: () => animation.pause(),\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}