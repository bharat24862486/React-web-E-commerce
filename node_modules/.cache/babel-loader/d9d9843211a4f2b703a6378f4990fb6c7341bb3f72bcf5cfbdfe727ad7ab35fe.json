{"ast":null,"code":"import { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\"read\", \"update\", \"preRender\", \"render\", \"postRender\"];\nconst steps = stepsOrder.reduce((acc, key) => {\n  acc[key] = createRenderStep(() => runNextFrame = true);\n  return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n  const step = steps[key];\n  acc[key] = function (process) {\n    let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!runNextFrame) startLoop();\n    return step.schedule(process, keepAlive, immediate);\n  };\n  return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n  acc[key] = steps[key].cancel;\n  return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n  acc[key] = () => steps[key].process(frameData);\n  return acc;\n}, {});\nconst processStep = stepId => steps[stepId].process(frameData);\nconst processFrame = timestamp => {\n  runNextFrame = false;\n  frameData.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n  frameData.timestamp = timestamp;\n  isProcessing = true;\n  stepsOrder.forEach(processStep);\n  isProcessing = false;\n  if (runNextFrame) {\n    useDefaultElapsed = false;\n    requestAnimationFrame(processFrame);\n  }\n};\nconst startLoop = () => {\n  runNextFrame = true;\n  useDefaultElapsed = true;\n  if (!isProcessing) requestAnimationFrame(processFrame);\n};\nexport { cancelSync, flushSync, sync };","map":{"version":3,"names":["createRenderStep","frameData","maxElapsed","useDefaultElapsed","runNextFrame","isProcessing","stepsOrder","steps","reduce","acc","key","sync","step","process","keepAlive","arguments","length","undefined","immediate","startLoop","schedule","cancelSync","cancel","flushSync","processStep","stepId","processFrame","timestamp","delta","Math","max","min","forEach","requestAnimationFrame"],"sources":["E:/Desktop/reactpsc/node_modules/framer-motion/dist/es/frameloop/index.mjs"],"sourcesContent":["import { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? 1000 / 60\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        requestAnimationFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        requestAnimationFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}